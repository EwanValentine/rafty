syntax = "proto3";

package rafty;

service Rafty {
  rpc Join(JoinRequest) returns (JoinResponse) {}
  rpc List(ListRequest) returns (ListResponse) {}
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
  rpc AnnounceLeader(AnnounceLeaderRequest) returns (AnnounceLeaderResponse) {}
}

message Attribute {
  string key = 1;
  string value = 2;
}

message Node {
  string id = 1;
  string host = 2;
  repeated Attribute attributes = 3;
  string status = 4;
}

message JoinRequest {
  string id = 1;
  string host = 2;
}

message JoinResponse {
  string id = 1;
}

message ListRequest {
  string host = 1;
}

message ListResponse {
  repeated int32 nodes = 1 [packed=true];
}

message RequestVoteRequest {
  string id = 1;
}

message RequestVoteResponse {
  bool vote = 1;
}

message HeartbeatRequest {
  string leader = 1;
  map<string, string> data = 2;
  repeated Node nodes = 3;
}

message HeartbeatResponse {
  bool success = 1;
}

message AnnounceLeaderRequest {
  string id = 1;
}

message AnnounceLeaderResponse {

  // Consent refers to `consent given`
  // we can define certain parameters
  // in future, such as aspects of the
  // new leader which could be incompatible
  // with one or more followers, which would
  // allow the node to die instead of connecting
  // I.e. can some nodes only talk to leaders
  // on a certain network range or partition?
  bool consent = 1;
}
