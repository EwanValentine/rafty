// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rafty.proto

/*
Package rafty is a generated protocol buffer package.

It is generated from these files:
	rafty.proto

It has these top-level messages:
	Attribute
	Node
	JoinRequest
	JoinResponse
	ListRequest
	ListResponse
	RequestVoteRequest
	RequestVoteResponse
	HeartbeatRequest
	HeartbeatResponse
	AnnounceLeaderRequest
	AnnounceLeaderResponse
*/
package rafty

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Attribute struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Attribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Attribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Node struct {
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Host       string       `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty"`
	Status     string       `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Node) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Node) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type JoinRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JoinRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JoinRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type JoinResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *JoinResponse) Reset()                    { *m = JoinResponse{} }
func (m *JoinResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()               {}
func (*JoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JoinResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListRequest struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ListResponse struct {
	Nodes []int32 `protobuf:"varint,1,rep,packed,name=nodes" json:"nodes,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListResponse) GetNodes() []int32 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type RequestVoteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RequestVoteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RequestVoteResponse struct {
	Vote bool `protobuf:"varint,1,opt,name=vote" json:"vote,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RequestVoteResponse) GetVote() bool {
	if m != nil {
		return m.Vote
	}
	return false
}

type HeartbeatRequest struct {
	Leader string            `protobuf:"bytes,1,opt,name=leader" json:"leader,omitempty"`
	Data   map[string]string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Nodes  []*Node           `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HeartbeatRequest) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *HeartbeatRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *HeartbeatRequest) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type HeartbeatResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *HeartbeatResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type AnnounceLeaderRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AnnounceLeaderRequest) Reset()                    { *m = AnnounceLeaderRequest{} }
func (m *AnnounceLeaderRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnounceLeaderRequest) ProtoMessage()               {}
func (*AnnounceLeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AnnounceLeaderRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AnnounceLeaderResponse struct {
	// Consent refers to `consent given`
	// we can define certain parameters
	// in future, such as aspects of the
	// new leader which could be incompatible
	// with one or more followers, which would
	// allow the node to die instead of connecting
	// I.e. can some nodes only talk to leaders
	// on a certain network range or partition?
	Consent bool `protobuf:"varint,1,opt,name=consent" json:"consent,omitempty"`
}

func (m *AnnounceLeaderResponse) Reset()                    { *m = AnnounceLeaderResponse{} }
func (m *AnnounceLeaderResponse) String() string            { return proto.CompactTextString(m) }
func (*AnnounceLeaderResponse) ProtoMessage()               {}
func (*AnnounceLeaderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AnnounceLeaderResponse) GetConsent() bool {
	if m != nil {
		return m.Consent
	}
	return false
}

func init() {
	proto.RegisterType((*Attribute)(nil), "rafty.Attribute")
	proto.RegisterType((*Node)(nil), "rafty.Node")
	proto.RegisterType((*JoinRequest)(nil), "rafty.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "rafty.JoinResponse")
	proto.RegisterType((*ListRequest)(nil), "rafty.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "rafty.ListResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "rafty.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "rafty.RequestVoteResponse")
	proto.RegisterType((*HeartbeatRequest)(nil), "rafty.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "rafty.HeartbeatResponse")
	proto.RegisterType((*AnnounceLeaderRequest)(nil), "rafty.AnnounceLeaderRequest")
	proto.RegisterType((*AnnounceLeaderResponse)(nil), "rafty.AnnounceLeaderResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rafty service

type RaftyClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	AnnounceLeader(ctx context.Context, in *AnnounceLeaderRequest, opts ...grpc.CallOption) (*AnnounceLeaderResponse, error)
}

type raftyClient struct {
	cc *grpc.ClientConn
}

func NewRaftyClient(cc *grpc.ClientConn) RaftyClient {
	return &raftyClient{cc}
}

func (c *raftyClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := grpc.Invoke(ctx, "/rafty.Rafty/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/rafty.Rafty/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/rafty.Rafty/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/rafty.Rafty/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftyClient) AnnounceLeader(ctx context.Context, in *AnnounceLeaderRequest, opts ...grpc.CallOption) (*AnnounceLeaderResponse, error) {
	out := new(AnnounceLeaderResponse)
	err := grpc.Invoke(ctx, "/rafty.Rafty/AnnounceLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rafty service

type RaftyServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	AnnounceLeader(context.Context, *AnnounceLeaderRequest) (*AnnounceLeaderResponse, error)
}

func RegisterRaftyServer(s *grpc.Server, srv RaftyServer) {
	s.RegisterService(&_Rafty_serviceDesc, srv)
}

func _Rafty_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafty.Rafty/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafty.Rafty/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafty.Rafty/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafty.Rafty/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rafty_AnnounceLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftyServer).AnnounceLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafty.Rafty/AnnounceLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftyServer).AnnounceLeader(ctx, req.(*AnnounceLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rafty_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rafty.Rafty",
	HandlerType: (*RaftyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Rafty_Join_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Rafty_List_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Rafty_RequestVote_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Rafty_Heartbeat_Handler,
		},
		{
			MethodName: "AnnounceLeader",
			Handler:    _Rafty_AnnounceLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rafty.proto",
}

func init() { proto.RegisterFile("rafty.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0x34, 0x29, 0xf4, 0x65, 0x9a, 0xca, 0x1b, 0x94, 0x10, 0x01, 0x6a, 0x2d, 0x24,
	0xca, 0x81, 0x8a, 0x75, 0x42, 0x20, 0x4e, 0x0c, 0x01, 0x42, 0x68, 0x02, 0x29, 0x07, 0xee, 0x6e,
	0x63, 0x44, 0xc4, 0x64, 0x8f, 0xf8, 0x65, 0x52, 0xff, 0x38, 0xee, 0xfc, 0x59, 0x28, 0x8e, 0xed,
	0xa5, 0xeb, 0x22, 0xf5, 0xe6, 0x67, 0x7f, 0xdf, 0xe7, 0xfd, 0x4c, 0x20, 0xa9, 0xf8, 0x4f, 0xda,
	0x2c, 0x2e, 0x2b, 0x45, 0x0a, 0x63, 0x63, 0xb0, 0x53, 0x18, 0x9d, 0x11, 0x55, 0xe5, 0xaa, 0x26,
	0x81, 0x63, 0x18, 0xfc, 0x16, 0x9b, 0x34, 0x98, 0x06, 0xf3, 0x51, 0xde, 0x1c, 0xf1, 0x3e, 0xc4,
	0x57, 0xfc, 0xa2, 0x16, 0x69, 0x68, 0xee, 0x5a, 0x83, 0x11, 0x44, 0xdf, 0x54, 0x21, 0xf0, 0x08,
	0xc2, 0xb2, 0xb0, 0xf2, 0xb0, 0x2c, 0x10, 0x21, 0xfa, 0xa5, 0x34, 0x59, 0xb1, 0x39, 0xe3, 0x2b,
	0x00, 0xee, 0x02, 0xe8, 0x74, 0x30, 0x1d, 0xcc, 0x93, 0xe5, 0x78, 0xd1, 0x66, 0xe2, 0x23, 0xe7,
	0x1d, 0x0d, 0x4e, 0x60, 0xa8, 0x89, 0x53, 0xad, 0xd3, 0xc8, 0x70, 0xac, 0xc5, 0x4e, 0x20, 0xf9,
	0xaa, 0x4a, 0x99, 0x8b, 0x3f, 0xb5, 0xd0, 0xb4, 0x4f, 0x70, 0xf6, 0x14, 0x0e, 0x5b, 0x17, 0x7d,
	0xa9, 0xa4, 0xde, 0x49, 0x98, 0xcd, 0x20, 0x39, 0x2f, 0x35, 0x39, 0xa4, 0x43, 0x04, 0x1d, 0xc4,
	0x1c, 0x0e, 0x5b, 0x89, 0x45, 0xa4, 0x10, 0x4b, 0x55, 0x08, 0x9d, 0x06, 0xd3, 0xc1, 0x3c, 0xfe,
	0x10, 0x8e, 0x83, 0xbc, 0xbd, 0x60, 0xcf, 0x00, 0x2d, 0xe8, 0x87, 0x22, 0xd1, 0x93, 0x26, 0x7b,
	0x01, 0xc7, 0x5b, 0x2a, 0x8b, 0x45, 0x88, 0xae, 0x14, 0x09, 0x23, 0xbc, 0x9b, 0x9b, 0x33, 0xfb,
	0x1b, 0xc0, 0xf8, 0x8b, 0xe0, 0x15, 0xad, 0x04, 0xf7, 0x39, 0x4e, 0x60, 0x78, 0x21, 0x78, 0x21,
	0x2a, 0xcb, 0xb4, 0x16, 0xbe, 0x86, 0xa8, 0xe0, 0xc4, 0xd3, 0xd0, 0x74, 0x78, 0x66, 0x3b, 0x7c,
	0xd3, 0x7d, 0xf1, 0x91, 0x13, 0xff, 0x24, 0xa9, 0xda, 0xe4, 0x46, 0x8e, 0x33, 0x57, 0x4e, 0x3b,
	0x99, 0xc4, 0xfa, 0x35, 0xe3, 0xb5, 0x75, 0x65, 0x6f, 0x60, 0xe4, 0xbd, 0xf6, 0x5d, 0x91, 0x77,
	0xe1, 0xdb, 0x80, 0xbd, 0x84, 0x7b, 0x9d, 0xf8, 0xbe, 0x7f, 0x77, 0x74, 0xbd, 0x5e, 0x0b, 0xad,
	0x6d, 0xad, 0xce, 0x64, 0xcf, 0xe1, 0xc1, 0x99, 0x94, 0xaa, 0x96, 0x6b, 0x71, 0x6e, 0x6a, 0xea,
	0x6b, 0xe1, 0x12, 0x26, 0x37, 0x85, 0xd7, 0xf0, 0x75, 0x73, 0x90, 0xe4, 0xe0, 0xd6, 0x5c, 0xfe,
	0x0b, 0x21, 0xce, 0x9b, 0xd2, 0xf0, 0x04, 0xa2, 0x66, 0x27, 0x10, 0x6d, 0xa9, 0x9d, 0x9d, 0xca,
	0x8e, 0xb7, 0xee, 0x5a, 0x28, 0x3b, 0x68, 0x5c, 0x9a, 0x1d, 0xf0, 0x2e, 0x9d, 0x9d, 0xf1, 0x2e,
	0xdd, 0x25, 0x61, 0x07, 0xf8, 0x19, 0x92, 0xce, 0x98, 0xf1, 0x91, 0x55, 0xed, 0x2e, 0x48, 0x96,
	0xdd, 0xf6, 0xe4, 0x39, 0xef, 0x61, 0xe4, 0x7b, 0x88, 0x0f, 0x7b, 0xa6, 0x9a, 0xa5, 0xbb, 0x0f,
	0x9e, 0xf0, 0x1d, 0x8e, 0xb6, 0xbb, 0x85, 0x8f, 0xdd, 0xe7, 0x77, 0x5b, 0xb7, 0xb3, 0x27, 0x3d,
	0xaf, 0x0e, 0xb8, 0x1a, 0x9a, 0x1f, 0xc8, 0xe9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51, 0x3e,
	0x6b, 0x2e, 0x4f, 0x04, 0x00, 0x00,
}
